# -*- coding: utf-8 -*-
"""Gold Price predictions

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c4CTYMEECsPmlVYgvZcVNdQJBrcmHqna
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

data=pd.read_csv('/content/FINAL_USO.csv')

data.head()

data.tail()

data.shape

data.info()

data.isnull().sum()

data.describe()

correlation=data.corr()

plt.figure(figsize=(10, 10))
sns.heatmap(correlation, cmap='Reds', cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size': 8})
plt.show()

print(correlation['Open'])

sns.distplot(data['Open'], color='red')

X = data.drop(['Date', 'Close', 'SP_close', 'DJ_close', 'EG_close', 'GDX_Close', 'GDX_Adj Close', 'USO_Close', 'USO_Adj Close'], axis=1)

Y = data ['Open']

print(X)

print(Y)

# Replace the following lines with your actual data
x = [1, 2, 3, 4, 5]
y = [6, 7, 8, 9, 10]

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

regressor=RandomForestRegressor(n_estimators=100)

#  X_train = x_train  # Assuming x_train contains your training features
#  Y_train = y_train  # Assuming y_train contains your target variable

Y_test = np.array(Y_test).reshape(-1, 1)

regressor.fit(X_train, Y_train)

test_data_prediction = regressor.predict(X_test)

print(test_data_prediction)

error_score = metrics.r2_score(Y_test,test_data_prediction)

print("R Square Error : ",error_score)

Y_test=list(Y_test)

plt.plot(Y_test, color='green', label='Actual Value')
plt.plot(test_data_prediction, color='red', label='Predictive Value')
plt.title('Actual Price vs Predictive price')
plt.xlabel('Number of Values')  # Correcting the typo in 'xlabel'
plt.ylabel('Gold Price')  # Correcting the typo in 'ylabel'
plt.legend()
plt.show()  #

accuracy =metrics.r2_score(Y_test, test_data_prediction)
print("R-squared:", accuracy)

r2_score = float(input("Enter the R-squared score: "))

r2_percentage = r2_score * 100

print("Prediction Acuuracy score as percentage:", r2_percentage)